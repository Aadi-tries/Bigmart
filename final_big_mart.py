# -*- coding: utf-8 -*-
"""Final_Big_Mart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r73eHj3yRb5BRJtRBIGY4PDOMHp-UB44
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/bigdatamart_Train.csv')
df1 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/bigdatamart_Test.csv')

df.head()

df1.head()

df1.shape,df.shape

df.isnull().sum()

df1.isnull().sum()

df.describe()

df1.describe()

df.info()

df1.info()

df=df.drop(['Item_Identifier','Outlet_Identifier'],axis=1)

df.head()

df1.head()

df.isnull().mean()*100

df1.isnull().mean()*100

plt.figure(figsize=(6,4))
sns.heatmap(df.isnull(),cmap='cool_r')
plt.show()

plt.figure(figsize=(6,4))
sns.heatmap(df1.isnull(),cmap='cool_r')
plt.show()

#missing valuesImputation
df['Item_Weight'].unique()

df1['Item_Weight'].unique()

df['Item_Weight'].mean()

df['Item_Weight']=df['Item_Weight'].fillna(df['Item_Weight'].mean())
df.isnull().sum()

df1['Item_Weight']=df1['Item_Weight'].fillna(df1['Item_Weight'].mean())
df1.isnull().sum()

df['Outlet_Size'].unique()

df1['Outlet_Size'].unique()

df['Outlet_Size'].value_counts(normalize = True)
df['Outlet_Size'].value_counts().plot.bar()
plt.title('Different type of outlet location in the store')
plt.xlabel('Item')
plt.ylabel('Number of Items')
plt.show()

df['Outlet_Size'].mode()[0]

df1['Outlet_Size'].mode()[0]

df['Outlet_Size']=df['Outlet_Size'].fillna(df['Outlet_Size'].mode()[0])

df.isnull().sum()

df.head()

df1['Outlet_Size']=df1['Outlet_Size'].fillna(df1['Outlet_Size'].mode()[0])

df1.isnull().sum()

df1.head()

df1=df1.drop(['Item_Identifier','Outlet_Identifier'],axis=1)

df1.head()

df.replace({'Item_Fat_Content':{'low fat':'Low Fat','LF':'Low Fat','reg':'Regular'}},inplace=True)
df['Item_Fat_Content'].value_counts()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['Item_Fat_Content']=le.fit_transform(df['Item_Fat_Content'])
df['Item_Type']=le.fit_transform(df['Item_Type'])
df['Outlet_Size']=le.fit_transform(df['Outlet_Size'])
df['Outlet_Location_Type']=le.fit_transform(df['Outlet_Location_Type'])
df['Outlet_Type']=le.fit_transform(df['Outlet_Type'])

df.head()

def plotting_3_chart(df, feature):
    ## Importing seaborn, matplotlab and scipy modules.
    import matplotlib.pyplot as plt
    import matplotlib.gridspec as gridspec
    from scipy import stats
    import matplotlib.style as style
    style.use('fivethirtyeight')

    ## Creating a customized chart. and giving in figsize and everything.
    fig = plt.figure(constrained_layout=True, figsize=(10,6))
    ## creating a grid of 3 cols and 3 rows.
    grid = gridspec.GridSpec(ncols=3, nrows=3, figure=fig)
    #gs = fig3.add_gridspec(3, 3)

    ## Customizing the histogram grid.
    ax1 = fig.add_subplot(grid[0, :2])
    ## Set the title.
    ax1.set_title('Histogram')
    ## plot the histogram.
    sns.distplot(df.loc[:,feature], norm_hist=True, ax = ax1)

    # customizing the QQ_plot.
    ax2 = fig.add_subplot(grid[1, :2])
    ## Set the title.
    ax2.set_title('QQ_plot')
    ## Plotting the QQ_Plot.
    stats.probplot(df.loc[:,feature], plot = ax2)

    ## Customizing the Box Plot.
    ax3 = fig.add_subplot(grid[:, 2])
    ## Set title.
    ax3.set_title('Box Plot')
    ## Plotting the box plot.
    sns.boxplot(df.loc[:,feature], orient='v', ax = ax3 );

plotting_3_chart(df, 'Item_Outlet_Sales')

import matplotlib.style as style
style.use('ggplot')
sns.set_style('whitegrid')
plt.subplots(figsize = (20,10))


mask = np.zeros_like(df.corr())
mask[np.triu_indices_from(mask)] = True


sns.heatmap(df.corr(),
            cmap=sns.diverging_palette(20, 220, n=200),
            mask = mask,
            annot=True,
            center = 0,
           );

plt.title("Heatmap of all the Features", fontsize = 30);

def customized_scatterplot(y, x):
        ## Sizing the plot.
    style.use('fivethirtyeight')
    plt.subplots(figsize = (12,8))
    ## Plotting target variable with predictor variable(OverallQual)
    sns.scatterplot(y = y, x = x);

customized_scatterplot(df.Item_Outlet_Sales,df.Item_MRP)

customized_scatterplot(df.Item_Outlet_Sales,df.Outlet_Type)

customized_scatterplot(df.Item_Outlet_Sales,df.Item_Visibility)

customized_scatterplot(df.Item_Outlet_Sales,df.Item_Weight)

customized_scatterplot(df.Item_Outlet_Sales,df.Item_Type)

customized_scatterplot(df.Item_Outlet_Sales,df.Item_Fat_Content)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(df,df['Item_Outlet_Sales'],test_size=0.25, random_state=0)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import metrics

Scalar=StandardScaler()
x_test_scaled=Scalar.fit_transform(x_test.values.reshape(1,-1))

Scalar=StandardScaler()
Scalar.fit(x_train)
x_train_scaled=Scalar.fit_transform(x_train)
x_test_scaled=Scalar.fit_transform(x_test.values.reshape(1,-1))

model=DecisionTreeRegressor(random_state=2)
model.fit(x_train,y_train)
y_pred=pd.DataFrame(model.predict(x_test))

print("R2 Score",metrics.r2_score(y_test,y_pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test,y_pred)))

from sklearn.tree import DecisionTreeRegressor
model= DecisionTreeRegressor(random_state=2)
model.fit(x_train,y_train)

import pickle
with open('decision_tree_model.pkl', 'wb') as file:
    pickle.dump(model, file)

import joblib
with open('decision_tree_model.pkl', 'rb') as file:
    loaded_model = joblib.load(file)
    predictions=loaded_model.predict(x_test)

with open('scaler.pkl', 'wb') as file:
    pickle.dump(Scalar, file)

with open('scaler.pkl', 'rb') as file:
    loaded_model = pickle.load(file)

import joblib
joblib.dump(model, 'decision_tree_model.pkl')

from google.colab import files
files.download('decision_tree_model.pkl')

from google.colab import files
files.download('scaler.pkl')